name: PR Checks

on:
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.3'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath
          tools: phpstan, php-cs-fixer

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Check PHP syntax
        run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

      - name: Run PHP CS Fixer (if configured)
        run: |
          if [ -f .php-cs-fixer.php ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff
          else
            echo "⚠️ PHP CS Fixer not configured"
          fi
        continue-on-error: true

      - name: Run PHPStan (if configured)
        run: |
          if [ -f phpstan.neon ]; then
            vendor/bin/phpstan analyse
          else
            echo "⚠️ PHPStan not configured"
          fi
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Run ESLint (if configured)
        run: npm run lint --if-present
        continue-on-error: true

      - name: Run Prettier check (if configured)
        run: |
          if [ -f .prettierrc ]; then
            npx prettier --check "resources/**/*.{js,jsx,ts,tsx,vue}"
          else
            echo "⚠️ Prettier not configured"
          fi
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, redis
          coverage: xdebug

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets for testing
        run: npm run build

      - name: Prepare Laravel Application
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear

      - name: Run tests with coverage
        run: php artisan test --parallel --coverage --min=70
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: 127.0.0.1

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build assets
        run: npm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Verify build
        run: |
          if [ ! -d "public/build/assets" ]; then
            echo "❌ Build verification failed"
            exit 1
          fi
          echo "✅ Build successful"

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Run Composer audit
        run: composer audit
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
